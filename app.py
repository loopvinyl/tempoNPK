import streamlit as st
import pandas as pd
import numpy as np
from scipy.stats import kruskal, normaltest
import matplotlib.pyplot as plt
import seaborn as sns
import tabula
import base64
import io
import re
from matplotlib.ticker import MaxNLocator

# Configura√ß√µes gerais
st.set_page_config(page_title="An√°lise Estat√≠stica de Vermicompostagem", layout="wide")
st.title("üìä An√°lise Estat√≠stica de Par√¢metros de Vermicomposto")
st.markdown("""
**Aplica√ß√£o para an√°lise de diferen√ßas significativas em par√¢metros de vermicomposto ao longo do tempo**
Utiliza o teste de Kruskal-Wallis (n√£o param√©trico) para pequenas amostras.
""")

## Mapeamento de par√¢metros para nomes amig√°veis
PARAM_MAPPING = {
    "TKN (g/kg)": "Nitrog√™nio Total (N)",
    "Total P (g/kg)": "F√≥sforo Total (P)",
    "TK (g/kg)": "Pot√°ssio Total (K)",
    "pH (H‚ÇÇO)": "pH",
    "C/N ratio": "Rela√ß√£o C/N"
}

## Mapeamento de dias para ordena√ß√£o num√©rica
DAY_MAPPING = {
    'Day 1': 1,
    'Day 30': 30,
    'Day 60': 60,
    'Day 90': 90,
    'Day 120': 120
}

## Fun√ß√£o para Carregar Dados de Exemplo
@st.cache_data
def load_sample_data_with_stdev():
    sample_param_data = {
        'TKN (g/kg)': {
            'Day 1': {'mean': 20.8, 'stdev': 0.5},
            'Day 30': {'mean': 21.5, 'stdev': 0.6},
            'Day 60': {'mean': 22.2, 'stdev': 0.7},
            'Day 90': {'mean': 23.0, 'stdev': 0.8},
            'Day 120': {'mean': 24.5, 'stdev': 0.9}
        },
        'Total P (g/kg)': {
            'Day 1': {'mean': 12.1, 'stdev': 0.3},
            'Day 30': {'mean': 12.8, 'stdev': 0.4},
            'Day 60': {'mean': 13.5, 'stdev': 0.4},
            'Day 90': {'mean': 14.2, 'stdev': 0.5},
            'Day 120': {'mean': 15.0, 'stdev': 0.6}
        },
        'TK (g/kg)': {
            'Day 1': {'mean': 1.28, 'stdev': 0.02},
            'Day 30': {'mean': 1.29, 'stdev': 0.02},
            'Day 60': {'mean': 1.30, 'stdev': 0.02},
            'Day 90': {'mean': 1.31, 'stdev': 0.02},
            'Day 120': {'mean': 1.32, 'stdev': 0.02}
        },
        'pH (H‚ÇÇO)': {
            'Day 1': {'mean': 7.04, 'stdev': 0.05},
            'Day 30': {'mean': 7.00, 'stdev': 0.05},
            'Day 60': {'mean': 6.95, 'stdev': 0.05},
            'Day 90': {'mean': 6.90, 'stdev': 0.05},
            'Day 120': {'mean': 6.85, 'stdev': 0.05}
        },
        'C/N ratio': {
            'Day 1': {'mean': 11.2, 'stdev': 0.2},
            'Day 30': {'mean': 10.9, 'stdev': 0.25},
            'Day 60': {'mean': 10.5, 'stdev': 0.3},
            'Day 90': {'mean': 10.0, 'stdev': 0.35},
            'Day 120': {'mean': 9.5, 'stdev': 0.4}
        }
    }

    num_replications = 3
    days = ['Day 1', 'Day 30', 'Day 60', 'Day 90', 'Day 120']
    all_replicated_data = []

    for param_name, daily_stats in sample_param_data.items():
        for _ in range(num_replications):
            row_data = {'Parameter': param_name, 'Substrate': 'VC-M'}
            for day in days:
                stats = daily_stats.get(day)
                if stats:
                    simulated_value = np.random.normal(
                        loc=stats['mean'], 
                        scale=stats['stdev']
                    )
                    
                    if param_name == 'pH (H‚ÇÇO)':
                        simulated_value = np.clip(simulated_value, 0.0, 14.0)
                    elif 'g/kg' in param_name or 'ratio' in param_name:
                        simulated_value = max(0.0, simulated_value)
                    
                    row_data[day] = simulated_value
                else:
                    row_data[day] = np.nan
            all_replicated_data.append(row_data)

    return pd.DataFrame(all_replicated_data)

## Fun√ß√£o para extrair dados do PDF com cache
@st.cache_data(show_spinner="Extraindo tabela do PDF...")
def extract_pdf_data(uploaded_file):
    try:
        area_table2 = [385, 90, 680, 810] 
        columns_table2 = [190, 260, 320, 380, 440, 500, 560, 620, 680, 740]
        
        tables = tabula.read_pdf(
            io.BytesIO(uploaded_file.getvalue()),
            pages=4,
            multiple_tables=False,
            area=area_table2,
            columns=columns_table2,
            output_format='dataframe',
            lattice=True,
            pandas_options={'header': None}
        )
        
        return tables[0] if tables else None
    except Exception as e:
        st.error(f"Erro na extra√ß√£o do PDF: {str(e)}")
        return None

## Fun√ß√£o para processar tabela extra√≠da do PDF
def process_raw_table(df_raw):
    pdf_param_names = {
        'TKN (g kg-1)': 'TKN (g/kg)',
        'Total P (g kg-1)': 'Total P (g/kg)',
        'TK (g kg-1)': 'TK (g/kg)',
        'pH (H2O)': 'pH (H‚ÇÇO)',
        'C/N ratio': 'C/N ratio'
    }
    
    pdf_days = ['Initial', 'Day 30', 'Day 60', 'Day 90', 'Day 120']
    extracted_data = {}

    for _, row in df_raw.iterrows():
        param_raw_name = str(row.iloc[0]).strip()
        
        # Encontrar nome padronizado do par√¢metro
        standard_param_name = None
        for pdf_name, std_name in pdf_param_names.items():
            if pdf_name in param_raw_name:
                standard_param_name = std_name
                break
        
        if standard_param_name:
            extracted_data[standard_param_name] = {}
            col_offset = 1
            
            for i, day_name in enumerate(pdf_days):
                cell_value = str(row.iloc[col_offset + i*2]).strip()
                match = re.match(r"(\d+\.?\d*)\s*¬±\s*(\d+\.?\d*)", cell_value)
                if match:
                    mean_val = float(match.group(1))
                    stdev_val = float(match.group(2))
                    extracted_data[standard_param_name][day_name] = {
                        'mean': mean_val,
                        'stdev': stdev_val
                    }
                else:
                    try:
                        mean_val = float(cell_value)
                        stdev_val = 0.01 * mean_val
                        if stdev_val == 0: 
                            stdev_val = 0.01
                        extracted_data[standard_param_name][day_name] = {
                            'mean': mean_val,
                            'stdev': stdev_val
                        }
                    except ValueError:
                        extracted_data[standard_param_name][day_name] = {'mean': np.nan, 'stdev': np.nan}
    
    return extracted_data

## Fun√ß√£o para verificar pressupostos estat√≠sticos
def check_statistical_assumptions(data):
    results = []
    for i, group in enumerate(data):
        if len(group) > 3:  # Normaltest requer pelo menos 3 amostras
            _, p_val = normaltest(group)
            results.append({
                "Grupo": f"Grupo {i+1}",
                "p-value (normalidade)": p_val,
                "Normal (p>0.05)": p_val > 0.05
            })
    return pd.DataFrame(results)

## Fun√ß√£o para plotar evolu√ß√£o temporal
def plot_parameter_evolution(ax, data, days, param_name):
    # Converter dias para num√©rico para ordena√ß√£o
    numeric_days = [DAY_MAPPING[d] for d in days]
    
    for i, (day, num_day) in enumerate(zip(days, numeric_days)):
        group_data = data[i]
        ax.scatter(
            [num_day] * len(group_data), 
            group_data, 
            alpha=0.6, 
            s=80,
            label=f"{day.replace('Day ', 'Dia ')}"
        )
    
    # Calcular e plotar medianas
    medians = [np.median(group) for group in data]
    ax.plot(numeric_days, medians, 'ro-', markersize=8, linewidth=2)
    
    # Configurar eixo X com dias num√©ricos
    ax.set_xticks(numeric_days)
    ax.set_xticklabels([d.replace('Day ', '') for d in days])
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))
    
    # Melhorar formata√ß√£o
    ax.set_xlabel("Dias de Vermicompostagem", fontsize=12)
    ax.set_ylabel(PARAM_MAPPING.get(param_name, param_name), fontsize=12)
    ax.set_title(f"Evolu√ß√£o do {PARAM_MAPPING.get(param_name, param_name)}", fontsize=14)
    ax.grid(True, alpha=0.3)
    ax.legend(loc='best', fontsize=10)
    
    return ax

## Fun√ß√£o Principal
def main():
    # Inicializa√ß√£o de vari√°veis
    df = load_sample_data_with_stdev()
    
    # Op√ß√µes de Dados na Sidebar
    st.sidebar.header("Op√ß√µes de Dados")
    use_sample = st.sidebar.checkbox("Usar dados de exemplo", value=True)
    
    if not use_sample:
        uploaded_file = st.sidebar.file_uploader("Carregue o artigo PDF", type="pdf")
        if uploaded_file:
            with st.spinner("Processando PDF..."):
                df_raw = extract_pdf_data(uploaded_file)
                
                if df_raw is not None:
                    st.sidebar.info("Tabela extra√≠da do PDF com sucesso!")
                    st.sidebar.dataframe(df_raw.head(3))
                    
                    extracted_data = process_raw_table(df_raw)
                    num_replications = 3
                    replicated_data = []
                    app_days_map = {
                        'Initial': 'Day 1',
                        'Day 30': 'Day 30',
                        'Day 60': 'Day 60',
                        'Day 90': 'Day 90',
                        'Day 120': 'Day 120'
                    }

                    for param_name, daily_stats in extracted_data.items():
                        for _ in range(num_replications):
                            row_data = {'Parameter': param_name, 'Substrate': 'VC-M'}
                            for pdf_day, app_day in app_days_map.items():
                                stats = daily_stats.get(pdf_day)
                                if stats:
                                    value = np.random.normal(
                                        loc=stats['mean'], 
                                        scale=stats['stdev']
                                    )
                                    
                                    if param_name == 'pH (H‚ÇÇO)':
                                        value = np.clip(value, 0.0, 14.0)
                                    elif 'g/kg' in param_name or 'ratio' in param_name:
                                        value = max(0.0, value)
                                        
                                    row_data[app_day] = value
                                else:
                                    row_data[app_day] = np.nan
                            replicated_data.append(row_data)
                    
                    df = pd.DataFrame(replicated_data)
                    df = df.dropna(how='all')
                else:
                    st.warning("Falha na extra√ß√£o. Usando dados de exemplo.")
        else:
            st.info("Nenhum PDF carregado. Usando dados de exemplo.")

    # Pr√©-visualiza√ß√£o dos Dados
    st.header("Pr√©-visualiza√ß√£o dos Dados")
    st.dataframe(df.head())
    st.markdown(f"**Total de amostras:** {len(df)}")
    st.markdown("---")

    # Configura√ß√£o de An√°lise
    st.sidebar.header("Configura√ß√£o de An√°lise")
    unique_params = df['Parameter'].unique()
    
    # Criar op√ß√µes com nomes amig√°veis
    param_options = [PARAM_MAPPING.get(p, p) for p in unique_params]
    
    selected_params = st.sidebar.multiselect(
        "Selecione os par√¢metros:",
        options=param_options,
        default=param_options[:3] if len(param_options) > 3 else param_options
    )
    
    # Converter de volta para nomes originais
    reverse_mapping = {v: k for k, v in PARAM_MAPPING.items()}
    selected_original_params = [reverse_mapping.get(p, p) for p in selected_params]
    
    # Realizar An√°lise
    if not selected_params:
        st.warning("Selecione pelo menos um par√¢metro para an√°lise.")
        return

    results = []
    assumptions_results = []
    days_ordered = ['Day 1', 'Day 30', 'Day 60', 'Day 90', 'Day 120']
    
    # Configurar subplots dinamicamente
    num_plots = len(selected_params)
    fig, axes = plt.subplots(
        num_plots, 1, 
        figsize=(10, 5 * num_plots),
        squeeze=False
    )
    axes = axes.flatten()
    
    for i, param in enumerate(selected_original_params):
        param_df = df[df['Parameter'] == param]
        
        # Coletar dados por dia
        data_by_day = []
        valid_days = []
        for day in days_ordered:
            if day in param_df.columns:
                day_data = param_df[day].dropna().values
                if len(day_data) > 0:
                    data_by_day.append(day_data)
                    valid_days.append(day)
        
        # Verificar pressupostos
        assumptions = check_statistical_assumptions(data_by_day)
        if not assumptions.empty:
            assumptions_results.append({
                "Par√¢metro": PARAM_MAPPING.get(param, param),
                "Resultados": assumptions
            })
        
        # Executar teste de Kruskal-Wallis
        if len(data_by_day) >= 2:
            h_stat, p_val = kruskal(*data_by_day)
            results.append({
                "Par√¢metro": PARAM_MAPPING.get(param, param),
                "H-Statistic": h_stat,
                "p-value": p_val,
                "Significativo (p<0.05)": p_val < 0.05
            })
            
            # Plotar gr√°fico
            ax = axes[i]
            plot_parameter_evolution(ax, data_by_day, valid_days, param)
            
            # Adicionar resultado do teste
            ax.annotate(f"Kruskal-Wallis: H = {h_stat:.2f}, p = {p_val:.4f}",
                        xy=(0.5, 0.95), xycoords='axes fraction',
                        ha='center', fontsize=10,
                        bbox=dict(boxstyle="round,pad=0.3", fc="yellow", alpha=0.5))
        else:
            st.warning(f"Dados insuficientes para {PARAM_MAPPING.get(param, param)}")
    
    # Resultados Estat√≠sticos
    st.header("Resultados Estat√≠sticos")
    if results:
        results_df = pd.DataFrame(results)
        st.dataframe(results_df.style.apply(
            lambda x: ['background-color: #fffd8e' if x['p-value'] < 0.05 else '' for _ in x],
            axis=1
        ))
    else:
        st.info("Nenhum resultado estat√≠stico dispon√≠vel.")
    
    # Pressupostos Estat√≠sticos
    if assumptions_results:
        st.subheader("Verifica√ß√£o de Pressupostos (Normalidade)")
        for res in assumptions_results:
            st.markdown(f"**{res['Par√¢metro']}**")
            st.dataframe(res['Resultados'])
    
    # Gr√°ficos
    st.header("Evolu√ß√£o Temporal dos Par√¢metros")
    plt.tight_layout()
    st.pyplot(fig)
    
    # Interpreta√ß√£o
    st.header("Interpreta√ß√£o dos Resultados")
    if results:
        for res in results:
            st.subheader(res["Par√¢metro"])
            if res["p-value"] < 0.05:
                st.success(f"‚úÖ **Diferen√ßas significativas!** (p = {res['p-value']:.4f})")
                st.markdown("""
                - **Rejeitamos a hip√≥tese nula (H‚ÇÄ)**
                - Mudan√ßas significativas ao longo do tempo
                - A vermicompostagem afeta este par√¢metro
                """)
            else:
                st.warning(f"‚ùå **Sem diferen√ßas significativas** (p = {res['p-value']:.4f})")
                st.markdown("""
                - **Aceitamos a hip√≥tese nula (H‚ÇÄ)**
                - Par√¢metro est√°vel durante o processo
                - Sem impacto estatisticamente detect√°vel
                """)
    
    # Metodologia
    st.sidebar.header("Sobre a Metodologia")
    st.sidebar.markdown("""
    **Teste de Kruskal-Wallis**
    - Alternativa n√£o param√©trica √† ANOVA
    - Compara medianas de 3+ grupos
    - Hip√≥teses:
        - H‚ÇÄ: Distribui√ß√µes id√™nticas
        - H‚ÇÅ: Pelo menos uma distribui√ß√£o diferente
        
    **Interpreta√ß√£o:**
    - p < 0.05: Diferen√ßas significativas
    - p ‚â• 0.05: Sem evid√™ncia de diferen√ßas
    """)

if __name__ == "__main__":
    main()
